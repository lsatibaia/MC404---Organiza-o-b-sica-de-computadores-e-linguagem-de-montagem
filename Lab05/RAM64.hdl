// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:

/**
- Mesma ideia do RAM8, mas agora por ser um RAM64, em vez de usar 8 register, usamos 8 RAM8
**/
	DMux8Way(in=load, sel=address[3..5], a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8);

	RAM8(in=in, load=out1, address=address[0..2], out=out9);
	RAM8(in=in, load=out2, address=address[0..2], out=out10);
	RAM8(in=in, load=out3, address=address[0..2], out=out11);
	RAM8(in=in, load=out4, address=address[0..2], out=out12);
	RAM8(in=in, load=out5, address=address[0..2], out=out13);
	RAM8(in=in, load=out6, address=address[0..2], out=out14);
	RAM8(in=in, load=out7, address=address[0..2], out=out15);
	RAM8(in=in, load=out8, address=address[0..2], out=out16);

	Mux8Way16(a=out9, b=out10, c=out11, d=out12, e=out13, f=out14, g=out15, h=out16, sel=address[3..5], out=out);
}